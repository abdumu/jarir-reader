const inquirer = require("inquirer");
const { CredentialsAreSet, setSettings, clearResidue } = require("./backend/helpers");
const { getUserBooks, downloadBook, downloadAndGenerateBook } = require("./backend/api-calls");
const { unzipBook } = require("./backend/decrypt");
const bookGenerator = require("./backend/book-generator");

const inquirerErrorLog = (error) => {
    if (error.isTtyError) {
        console.error("Prompt couldn't be rendered in the current environment.\n");
    } else {
        console.error((typeof error === "object" ? error.message : error) + "\n");
    }
    process.exit();
};

const inquirerErrorLogWithBook = (book, error) => {
    // clearResidue(book)
    inquirerErrorLog(error);
};

const initiateCli = () => {
    inquirer
        .prompt([
            {
                type: "confirm",
                name: "acceptTerms",
                message:
                    "🇸🇦️ Usage Terms:\n You agree to use this tool for your personal use only\n and that you will not share, sell, and/or distribute\n any copyrighted materials generated by this tool.\n By violating these terms, you are subjected to legal\n proceedings against you by Jarir company and\n we (the developers) are not responsible\n by any means by your foul actions.",
            },
        ])
        .then(async (answers) => {
            if (answers.acceptTerms) {
                askForCredentials();
            } else {
                process.exit();
            }
        })
        .catch((error) => console.log(error));
};

const askForCredentials = () => {
    if (CredentialsAreSet()) {
        inquirer
            .prompt([
                {
                    type: "confirm",
                    name: "savedLogin",
                    message: "Continue with the saved login credentials?",
                },
            ])
            .then(async (answers) => {
                if (answers.savedLogin) {
                    getUserBooks()
                        .then((books) => {
                            // console.log(books);
                            askToSelectBook(books);
                        })
                        .catch((error) => {
                            console.log(error);
                        });
                } else {
                    setSettings({
                        auth: null,
                        expires: null,
                    }).then(() => {
                        askForCredentials();
                    });
                }
            })
            .catch((error) => console.log(error));
    } else {
        inquirer
            .prompt([
                {
                    type: "input",
                    name: "email",
                    message: "Email",
                    validate: function (value) {
                        if (value.trim() !== "") {
                            return true;
                        }

                        return "Please enter a valid email address!";
                    },
                },
                {
                    type: "password",
                    message: "Enter a password",
                    name: "password",
                    validate: (value) => {
                        if (/\w/.test(value) && /\d/.test(value)) {
                            return true;
                        }

                        return "Password need to have at least a letter and a number";
                    },
                },
            ])
            .then(async (answers) => {
                setSettings({
                    email: answers.email,
                    password: answers.password,
                })
                    .then(() => {
                        getUserBooks().then((books) => {
                            askToSelectBook(books);
                        });
                    })
                    .catch((error) => console.log(error));
            })
            .catch((error) => console.log(error));
    }
};

const askToSelectBook = (books) => {
    inquirer
        .prompt([
            {
                type: "list",
                name: "book",
                message: "What book do you want to download?",
                choices: books,
                transformer: (item) => {
                    return item.id;
                },
            },
        ])
        .then(async (answers) => {
            const book = books[answers.book];

            downloadAndGenerateBook(book).then((r) => {
                clearResidue(book);
                process.exit();
            })
                .catch((error) => inquirerErrorLogWithBook(book, error));
        })
        .catch((error) => console.log(error));
};
// initiateCli();

module.exports = initiateCli;
